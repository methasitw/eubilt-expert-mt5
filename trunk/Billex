//+------------------------------------------------------------------+
//|                                                    BillexWiz.mq5 |
//|                                          Copyright 2013, ebill10 |
//|                                          http://fxfor.eubilt.com |
//+------------------------------------------------------------------+
#property copyright "Copyright 2013, ebill10"
#property link      "http://fxfor.eubilt.com"
#property version   "1.00"
//+------------------------------------------------------------------+
//| Include                                                          |
//+------------------------------------------------------------------+
#include <Billex\Exbillex.mqh>
//--- available signals
#include <Billex\Signal\SigAC_Billex.mqh>
#include <Billex\Signal\SigAMA_Billex.mqh>
#include <Billex\Signal\SigAO_Billex.mqh>
#include <Billex\Signal\SigBEP_Billex.mqh>
#include <Billex\Signal\SigBUP_Billex.mqh>
#include <Billex\Signal\SigCCI_Billex.mqh>
#include <Billex\Signal\SigDeM_Billex.mqh>
#include <Billex\Signal\SigDEMA_Billex.mqh>
#include <Billex\Signal\SigEnv_Billex.mqh>
#include <Billex\Signal\SigFrA_Billex.mqh>
#include <Billex\Signal\SigITF_Billex.mqh>
#include <Billex\Signal\SigMACD_Billex.mqh>
#include <Billex\Signal\SigMA_Billex.mqh>
#include <Billex\Signal\SigSAR_Billex.mqh>
#include <Billex\Signal\SigRSI_Billex.mqh>
#include <Billex\Signal\SigRVI_Billex.mqh>
#include <Billex\Signal\SigSto_Billex.mqh>
#include <Billex\Signal\SigTRIX_Billex.mqh>
#include <Billex\Signal\SigTEMA_Billex.mqh>
#include <Billex\Signal\SigWPR_Billex.mqh>
//--- available trailing
#include <Billex\TrailingBillex.mqh>
//--- available money management
#include <Billex\MoneyBillex.mqh>
#define SemnalUse 0

//+------------------------------------------------------------------+
//| Inputs                                                           |
//+------------------------------------------------------------------+
//--- inputs for expert
string             Expert_Title                  ="BillexWiz"; // Document name
input ulong Expert_MagicNumber =25345; 
bool Expert_EveryTick =true; 
input bool OnlyOneSignalUse = true ;
input int Signal_ThresholdOpen =0;
input int                Signal_ThresholdClose         =0;          // Signal threshold value to close [0...100]
input double             Signal_PriceLevel             =0.0;         // Price level to execute a deal
input double             Signal_StopLevel              =0.0;        // Stop Loss level (in points)
input double             Signal_TakeLevel              =0.0;        // Take Profit level (in points)
input int                Signal_Expiration             =2;           // Expiration of pending orders (in bars)
input bool   USE_AC = false;
input double             Signal_AC_Weight              =1.0;         // Accelerator Oscillator Weight [0...1.0]
input bool USE_AMA  = false;
input ENUM_TYPE_TREND AMA_TREND = 0;
input int                Signal_AMA_PeriodMA           =24;          // Adaptive Moving Average(10,...) Period of averaging
input int                Signal_AMA_PeriodFast         =20;           // Adaptive Moving Average(10,...) Period of fast EMA
input int                Signal_AMA_PeriodSlow         =150;          // Adaptive Moving Average(10,...) Period of slow EMA
input int                Signal_AMA_Shift              =6;           // Adaptive Moving Average(10,...) Time shift
input ENUM_APPLIED_PRICE Signal_AMA_Applied            =PRICE_MEDIAN; // Adaptive Moving Average(10,...) Prices series
input double             Signal_AMA_Weight             =1.0;         // Adaptive Moving Average(10,...) Weight [0...1.0]
input bool               USE_AO = false;
input ENUM_TYPE_TREND AO_TREND = 0;
input double             Signal_AO_Weight              =1.0;         // Awesome Oscillator Weight [0...1.0]
input bool   USE_BEARS = false;
input ENUM_TYPE_TREND BEARS_TREND = 0;
input int                Signal_BearsPower_PeriodBears =13;          // Bears Power(13) Period of calculation
input double             Signal_BearsPower_Weight      =1.0;         // Bears Power(13) Weight [0...1.0]
input bool USE_BULLS = false;
input ENUM_TYPE_TREND BULLS_TREND = 0;
input int                Signal_BullsPower_PeriodBulls =13;          // Bulls Power(13) Period of calculation
input double             Signal_BullsPower_Weight      =1.0;         // Bulls Power(13) Weight [0...1.0]
input bool  USE_CCI = false ;
input ENUM_TYPE_TREND CCI_TREND = 0 ;
input int                Signal_CCI_PeriodCCI          =8;           // Commodity Channel Index(8,...) Period of calculation
input ENUM_APPLIED_PRICE Signal_CCI_Applied            =PRICE_CLOSE; // Commodity Channel Index(8,...) Prices series
input double             Signal_CCI_Weight             =1.0;         // Commodity Channel Index(8,...) Weight [0...1.0]
input bool       USE_DeM = false;
input int                Signal_DeM_PeriodDeM          =8;           // DeMarker(8) Period of calculation
input double             Signal_DeM_Weight             =1.0;         // DeMarker(8) Weight [0...1.0]
input bool  USE_DEMA = false;
input ENUM_TYPE_TREND DEMA_TREND = 0;
input int                Signal_DEMA_PeriodMA          =15;          // Double Exponential Moving Average Period of averaging
input int                Signal_DEMA_Shift             =0;           // Double Exponential Moving Average Time shift
input ENUM_APPLIED_PRICE Signal_DEMA_Applied           =PRICE_CLOSE; // Double Exponential Moving Average Prices series
input double             Signal_DEMA_Weight            =1.0;         // Double Exponential Moving Average Weight [0...1.0]
input bool USE_ENVELOP = false;
input int                Signal_Envelopes_PeriodMA     =3;          // Envelopes(45,0,MODE_SMA,...) Period of averaging
input int                Signal_Envelopes_Shift        =0;           // Envelopes(45,0,MODE_SMA,...) Time shift
input ENUM_MA_METHOD     Signal_Envelopes_Method       =MODE_SMA;    // Envelopes(45,0,MODE_SMA,...) Method of averaging
input ENUM_APPLIED_PRICE Signal_Envelopes_Applied      =PRICE_WEIGHTED; // Envelopes(45,0,MODE_SMA,...) Prices series
input double             Signal_Envelopes_Deviation    =0.2;        // Envelopes(45,0,MODE_SMA,...) Deviation
input double             Signal_Envelopes_Weight       =13.3;         // Envelopes(45,0,MODE_SMA,...) Weight [0...1.0]
input bool  USE_FRAMA  = false;
input ENUM_TYPE_TREND FramaTypeTrend = 0 ;
input int                Signal_FraMA_PeriodMA         =75;          // Fractal Adaptive Moving Average Period of averaging
input int                Signal_FraMA_Shift            =3;           // Fractal Adaptive Moving Average Time shift
input ENUM_APPLIED_PRICE Signal_FraMA_Applied          =PRICE_CLOSE; // Fractal Adaptive Moving Average Prices series
input double             Signal_FraMA_Weight           =1.0;         // Fractal Adaptive Moving Average Weight [0...1.0]
input bool USE_INTRADAY = false;
input int                Signal_ITF_GoodHourOfDay      =-1;          // IntradayTimeFilter(-1,0,-1,...) Good hour
input int                Signal_ITF_BadHoursOfDay      =0;           // IntradayTimeFilter(-1,0,-1,...) Bad hours (bit-map)
input int                Signal_ITF_GoodDayOfWeek      =-1;          // IntradayTimeFilter(-1,0,-1,...) Good day of week
input int                Signal_ITF_BadDaysOfWeek      =0;           // IntradayTimeFilter(-1,0,-1,...) Bad days of week (bit-map)
input double             Signal_ITF_Weight             =1.0;         // IntradayTimeFilter(-1,0,-1,...) Weight [0...1.0]
input bool  USE_MACD = false;
input int                Signal_MACD_PeriodFast        =12;          // MACD(12,24,9,PRICE_CLOSE) Period of fast EMA
input int                Signal_MACD_PeriodSlow        =24;          // MACD(12,24,9,PRICE_CLOSE) Period of slow EMA
input int                Signal_MACD_PeriodSignal      =9;           // MACD(12,24,9,PRICE_CLOSE) Period of averaging of difference
input ENUM_APPLIED_PRICE Signal_MACD_Applied           =PRICE_CLOSE; // MACD(12,24,9,PRICE_CLOSE) Prices series
input double             Signal_MACD_Weight            =1.0;         // MACD(12,24,9,PRICE_CLOSE) Weight [0...1.0]
input bool   USE_MA = false;
input int                Signal_MA_PeriodMA            =112;          // Moving Average(12,0,...) Period of averaging
input int                Signal_MA_Shift               =9;           // Moving Average(12,0,...) Time shift
input ENUM_MA_METHOD     Signal_MA_Method              =MODE_LWMA;    // Moving Average(12,0,...) Method of averaging
input ENUM_APPLIED_PRICE Signal_MA_Applied             =PRICE_WEIGHTED; // Moving Average(12,0,...) Prices series
input double             Signal_MA_Weight              =1.0;         // Moving Average(12,0,...) Weight [0...1.0]
input bool USE_SAR = false;
input double             Signal_SAR_Step               =0.02;        // Parabolic SAR(0.02,0.2) Speed increment
input double             Signal_SAR_Maximum            =0.2;         // Parabolic SAR(0.02,0.2) Maximum rate
input double             Signal_SAR_Weight             =1.0;         // Parabolic SAR(0.02,0.2) Weight [0...1.0]
input bool USE_RSI = false;
input ENUM_TYPE_TREND RSI_TREND = 0 ;
input int                Signal_RSI_PeriodRSI          =12;           // Relative Strength Index(8,...) Period of calculation
input ENUM_APPLIED_PRICE Signal_RSI_Applied            =PRICE_CLOSE; // Relative Strength Index(8,...) Prices series
input double             Signal_RSI_Weight             =1.0;         // Relative Strength Index(8,...) Weight [0...1.0]
input bool USE_RVI = false;
input ENUM_TYPE_TREND RVI_TREND = 0;
input int                Signal_RVI_PeriodRVI          =10;          // Relative Vigor Index(10) Period of calculation
input double             Signal_RVI_Weight             =1.0;         // Relative Vigor Index(10) Weight [0...1.0]
input bool USE_STOCH = false;
input ENUM_TYPE_TREND STOCH_TREND = 0;
input int                Signal_Stoch_PeriodK          =18;           // Stochastic(8,3,3,...) K-period
input int                Signal_Stoch_PeriodD          =9;           // Stochastic(8,3,3,...) D-period
input int                Signal_Stoch_PeriodSlow       =23;           // Stochastic(8,3,3,...) Period of slowing
input ENUM_STO_PRICE     Signal_Stoch_Applied          =STO_LOWHIGH; // Stochastic(8,3,3,...) Prices to apply to
input double             Signal_Stoch_Weight           =1.0;         // Stochastic(8,3,3,...) Weight [0...1.0]
input bool USE_TRIX = false ;
input ENUM_TYPE_TREND TRIX_TREND = 6;
input int                Signal_TriX_PeriodTriX        =14;          // Triple Exponential Average Period of calculation
input ENUM_APPLIED_PRICE Signal_TriX_Applied           =PRICE_CLOSE; // Triple Exponential Average Prices series
input double             Signal_TriX_Weight            =1.0;         // Triple Exponential Average Weight [0...1.0]
input bool USE_TEMA = false;
input ENUM_TYPE_TREND TEMA_TREND = 6;
input int TEMA_PATTERN3 = 80;
input int                Signal_TEMA_PeriodMA          =12;          // Triple Exponential Moving Average Period of averaging
input int                Signal_TEMA_Shift             =0;           // Triple Exponential Moving Average Time shift
input ENUM_APPLIED_PRICE Signal_TEMA_Applied           =PRICE_CLOSE; // Triple Exponential Moving Average Prices series
input double             Signal_TEMA_Weight            =1.0;         // Triple Exponential Moving Average Weight [0...1.0]

input bool USE_WPR = false;
input bool USE_WPR_PRESETS = false;
input bool WPR_EVERY_TICK = false ;
input ENUM_TYPE_TREND WPR_TREND = 3;
input int WPR_OPEN = 3;
input int WPR_CLOSE = 3;
input double WPR_TAKELEVEL=1.0;
input double WPR_PRICE_LEVEL = 0.0;

input int WPR_PATTERN0 = 80;
input int WPR_PATTERN1 = 70;
input int WPR_PATTERN2 = 90; 
input int                Signal_WPR_PeriodWPR          =24;           // Williams Percent Range(8) Period of calculation
input double             Signal_WPR_Weight             =1.2;         // Williams Percent Range(8) Weight [0...1.0]

//--- inputs for trailing
input bool USE_TRAILING_FIXED_PIPS = false;
input int                Trailing_FixedPips_StopLevel  =30;          // Stop Loss trailing level (in points)
input int                Trailing_FixedPips_ProfitLevel=50;          // Take Profit trailing level (in points)
input bool  USE_TRAILING_MA = false;
input int                Trailing_MA_Period   =12;          // Period of MA
input int                Trailing_MA_Shift    =0;           // Shift of MA
input ENUM_MA_METHOD     Trailing_MA_Method   =MODE_SMA;    // Method of averaging
input ENUM_APPLIED_PRICE Trailing_MA_Applied  =PRICE_CLOSE; // Prices series

//--- inputs for money
input bool USE_MONEY_FIX_LOT = false;
input double Money_FixLot_Percent =20.0;
input double Money_FixLot_Lots =0.01;
input bool USE_MONEY_FIX_RISK = false;
input double             Money_FixRisk_Percent=10.0;        // Risk percentage

//+------------------------------------------------------------------+
//| Global expert object                                             |
//+------------------------------------------------------------------+

CExpert Billexwiz;
//+------------------------------------------------------------------+
//| Initialization function of the expert                            |
//+------------------------------------------------------------------+
int OnInit()
  {
//--- Initializing expert
   if(!Billexwiz.Init(Symbol(),Period(),Expert_EveryTick,Expert_MagicNumber))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing expert");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Creating signal
   CExpertSignal *signal=new CExpertSignal;
   if(signal==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating signal");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//---
   Billexwiz.InitSignal(signal);
//   signal.ThresholdOpen(Signal_ThresholdOpen);
 //  signal.ThresholdClose(Signal_ThresholdClose);
//   signal.PriceLevel(Signal_PriceLevel);
//   signal.StopLevel(Signal_StopLevel);
//   signal.TakeLevel(Signal_TakeLevel);
 //  signal.Expiration(Signal_Expiration);
   
 
if(USE_AC)
{ 
CSignalAC *filter0=new CSignalAC;
if(filter0==NULL)
{ printf(__FUNCTION__+": error creating filter0"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter0);
filter0.Weight(Signal_AC_Weight);
}

if (USE_AMA)
{  CSignalAMA *filter1=new CSignalAMA;
   if(filter1==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter1");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter1);
//--- Set filter parameters
   filter1.PeriodMA(Signal_AMA_PeriodMA);
   filter1.PeriodFast(Signal_AMA_PeriodFast);
   filter1.PeriodSlow(Signal_AMA_PeriodSlow);
   filter1.Shift(Signal_AMA_Shift);
   filter1.Applied(Signal_AMA_Applied);
   filter1.Weight(Signal_AMA_Weight);
   filter1.TrendType(AMA_TREND);
}
//---------------------------------
if(USE_AO)
{
CSignalAO *filter2=new CSignalAO;
if(filter2==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter2");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter2);
//--- Set filter parameters
   filter2.Weight(Signal_AO_Weight);
   filter2.TrendType(AO_TREND);
}

//------------------------------------------
if (USE_BEARS)
{
CSignalBearsPower *filter3=new CSignalBearsPower;
if(filter3==NULL)
{ printf(__FUNCTION__+": error creating filter3"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter3);
filter3.PeriodBears(Signal_BearsPower_PeriodBears);
filter3.Weight(Signal_BearsPower_Weight);
filter3.TrendType(BEARS_TREND);
}
//-----------------------------------------
if (USE_BULLS)
{
CSignalBullsPower *filter4=new CSignalBullsPower;
if(filter4==NULL)
{ printf(__FUNCTION__+": error creating filter4"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter4);
filter4.PeriodBulls(Signal_BullsPower_PeriodBulls);
filter4.Weight(Signal_BullsPower_Weight);
filter4.TrendType(BULLS_TREND);
}
//---------------------------------

if (USE_CCI)
{
CSignalCCI *filter5=new CSignalCCI;
if(filter5==NULL)
{  printf(__FUNCTION__+": error creating filter5"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter5);
filter5.PeriodCCI(Signal_CCI_PeriodCCI);
filter5.Applied(Signal_CCI_Applied);
filter5.Weight(Signal_CCI_Weight);
filter5.TrendType(CCI_TREND);
}
//---------------------------------------------

if (USE_DeM)
{
CSignalDeM *filter6=new CSignalDeM;
if(filter6==NULL)
{ printf(__FUNCTION__+": error creating filter6"); Billexwiz.Deinit();
      return(INIT_FAILED);
     }
signal.AddFilter(filter6);
filter6.PeriodDeM(Signal_DeM_PeriodDeM);
filter6.Weight(Signal_DeM_Weight);
}
//----------------
if (USE_DEMA)
{
CSignalDEMA *filter7=new CSignalDEMA;
   if(filter7==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter7");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter7);
//--- Set filter parameters
  
//----------------- 
filter7.PeriodMA(Signal_DEMA_PeriodMA);
filter7.Shift(Signal_DEMA_Shift);
filter7.Applied(Signal_DEMA_Applied);
filter7.Weight(Signal_DEMA_Weight);
filter7.TrendType(DEMA_TREND);
}


if (USE_ENVELOP)
{
CSignalEnvelopes *filter8=new CSignalEnvelopes;
if(filter8==NULL) { printf(__FUNCTION__+": error creating filter8"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter8);

//  if(Period()==PERIOD_H3) filter8.Period(PERIOD_H4);

filter8.PeriodMA(Signal_Envelopes_PeriodMA);
filter8.Shift(Signal_Envelopes_Shift);
filter8.Method(Signal_Envelopes_Method);
filter8.Applied(Signal_Envelopes_Applied);
filter8.Deviation(Signal_Envelopes_Deviation);
filter8.Weight(Signal_Envelopes_Weight);
}
//-----------------------------------
if (USE_FRAMA)
{
CSignalFrAMA *filter9=new CSignalFrAMA;
if(filter9==NULL) { printf(__FUNCTION__+": error creating filter9"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter9);
filter9.PeriodMA(Signal_FraMA_PeriodMA);
filter9.Shift(Signal_FraMA_Shift);
filter9.Applied(Signal_FraMA_Applied);
filter9.Weight(Signal_FraMA_Weight);
filter9.TrendType(FramaTypeTrend);
//-----------------------------------------------
if(USE_INTRADAY)
{
CSignalITF *filter10=new CSignalITF;
if(filter10==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter10");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter10);
//--- Set filter parameters
   filter10.GoodHourOfDay(Signal_ITF_GoodHourOfDay);
   filter10.BadHoursOfDay(Signal_ITF_BadHoursOfDay);
   filter10.GoodDayOfWeek(Signal_ITF_GoodDayOfWeek);
   filter10.BadDaysOfWeek(Signal_ITF_BadDaysOfWeek);
   filter10.Weight(Signal_ITF_Weight);
}
//---------------------------------
if (USE_MACD)
{
CSignalMACD *filter11=new CSignalMACD;
if(filter11==NULL)
{ printf(__FUNCTION__+": error creating filter11"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter11);
filter11.PeriodFast(Signal_MACD_PeriodFast);
filter11.PeriodSlow(Signal_MACD_PeriodSlow);
filter11.PeriodSignal(Signal_MACD_PeriodSignal);
filter11.Applied(Signal_MACD_Applied);
filter11.Weight(Signal_MACD_Weight);
}
}

//-------------------------------------------
if (USE_MA)
{
CSignalMA *filter12=new CSignalMA;
if(filter12==NULL)
{ printf(__FUNCTION__+": error creating filter12");   Billexwiz.Deinit();   return(INIT_FAILED);  }
signal.AddFilter(filter12);
filter12.PeriodMA(Signal_MA_PeriodMA);
filter12.Shift(Signal_MA_Shift);
filter12.Method(Signal_MA_Method);
filter12.Applied(Signal_MA_Applied);
filter12.Weight(Signal_MA_Weight);
}
//-------------------------------------

if (USE_SAR )
{
//--- Creating filter CSignalSAR
   CSignalSAR *filter13=new CSignalSAR;
   if(filter13==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter13");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter13);
//--- Set filter parameters
   filter13.Step(Signal_SAR_Step);
   filter13.Maximum(Signal_SAR_Maximum);
   filter13.Weight(Signal_SAR_Weight);
}

//--- Creating filter CSignalRSI
if (USE_RSI )
{
   CSignalRSI *filter14=new CSignalRSI;
   if(filter14==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter14");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
signal.AddFilter(filter14);
filter14.PeriodRSI(Signal_RSI_PeriodRSI);
filter14.Applied(Signal_RSI_Applied);
filter14.Weight(Signal_RSI_Weight);
filter14.TrendType(RSI_TREND);


}
//--- Creating filter CSignalRVI
if ( USE_RVI )
{
   CSignalRVI *filter15=new CSignalRVI;
   if(filter15==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter15");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter15);
//--- Set filter parameters
   filter15.PeriodRVI(Signal_RVI_PeriodRVI);
   filter15.Weight(Signal_RVI_Weight);
   filter15.TrendType(RVI_TREND);
}
//--- Creating filter CSignalStoch
if ( USE_STOCH )
{
   CSignalStoch *filter16=new CSignalStoch;
   if(filter16==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter16");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter16);
//--- Set filter parameters
   filter16.PeriodK(Signal_Stoch_PeriodK);
   filter16.PeriodD(Signal_Stoch_PeriodD);
   filter16.PeriodSlow(Signal_Stoch_PeriodSlow);
   filter16.Applied(Signal_Stoch_Applied);
   filter16.Weight(Signal_Stoch_Weight);
   filter16.TrendType(STOCH_TREND);
}
//--- Creating filter CSignalTriX
if ( USE_TRIX )
{

CSignalTriX *filter17=new CSignalTriX;
if(filter17==NULL) {  printf(__FUNCTION__+": error creating filter17"); Billexwiz.Deinit(); return(INIT_FAILED); }
signal.AddFilter(filter17);
filter17.PeriodTriX(Signal_TriX_PeriodTriX);
filter17.Applied(Signal_TriX_Applied);
filter17.Weight(Signal_TriX_Weight);
filter17.TrendType(TRIX_TREND); 
   
   
   
}


//--- Creating filter CSignalTEMA
if ( USE_TEMA)
{
   CSignalTEMA *filter18=new CSignalTEMA;
   if(filter18==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating filter18");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
   signal.AddFilter(filter18);
//--- Set filter parameters
   filter18.PeriodMA(Signal_TEMA_PeriodMA);
   filter18.Shift(Signal_TEMA_Shift);
   filter18.Applied(Signal_TEMA_Applied);
    filter18.Weight(Signal_TEMA_Weight);
   filter18.TrendType(TEMA_TREND);
   filter18.Pattern_3(TEMA_PATTERN3);
   
}

//--- Creating filter CSignalWPR
if ( USE_WPR)
{
   CSignalWPR *filter19=new CSignalWPR;
   if(filter19==NULL) { printf(__FUNCTION__+": error creating filter19"); Billexwiz.Deinit(); return(INIT_FAILED); }
      if (USE_WPR_PRESETS)
         if (Period()==PERIOD_M20) 
          {
          signal.AddFilter(filter19);
          filter19.PeriodWPR(24);
          filter19.Weight(1.2);
          filter19.TrendType(3);
          filter19.ThresholdOpen(3);
          filter19.ThresholdClose(3);
          filter19.TakeLevel(1.0);
          }
          //----------------------------------
          if (Period()==PERIOD_M15) 
          {
          signal.AddFilter(filter19);
          filter19.PeriodWPR(33);
          filter19.Weight(1.1);
          filter19.TrendType(1);
          filter19.ThresholdOpen(49);
          filter19.ThresholdClose(72);
          filter19.TakeLevel(4);
          filter19.Pattern_0(80);
          filter19.Pattern_1(70); 
          filter19.Pattern_2(90);     
 
          }
      else 
      {
        signal.AddFilter(filter19);
        filter19.PeriodWPR(Signal_WPR_PeriodWPR);
        filter19.Weight(Signal_WPR_Weight);
        filter19.TrendType(WPR_TREND);
        filter19.ThresholdOpen(WPR_OPEN);
        filter19.ThresholdClose(WPR_CLOSE);
        filter19.TakeLevel(WPR_TAKELEVEL);
        filter19.Pattern_0(WPR_PATTERN0);
        filter19.Pattern_1(WPR_PATTERN1); 
        filter19.Pattern_2(WPR_PATTERN2);
        filter19.Period(PERIOD_CURRENT);
        filter19.PriceLevel(WPR_PRICE_LEVEL);
        filter19.EveryTick(WPR_EVERY_TICK);     
      }    
          
   
} // inchidere conditie utilizare filtru WPR
 
//-----------------------------------





if ( USE_TRAILING_FIXED_PIPS )
{
//--- Creation of trailing object
   CTrailingFixedPips *trailing=new CTrailingFixedPips;
   if(trailing==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating trailing");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Add trailing to expert (will be deleted automatically))
   if(!Billexwiz.InitTrailing(trailing))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing trailing");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Set trailing parameters
   trailing.StopLevel(Trailing_FixedPips_StopLevel);
   trailing.ProfitLevel(Trailing_FixedPips_ProfitLevel);

}

//---------------------------------------------

if (USE_TRAILING_MA)
{

//--- Creation of trailing object
   CTrailingMA *trailing=new CTrailingMA;
   if(trailing==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating trailing");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Add trailing to expert (will be deleted automatically))
   if(!Billexwiz.InitTrailing(trailing))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing trailing");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Set trailing parameters
   trailing.Period(Trailing_MA_Period);
   trailing.Shift(Trailing_MA_Shift);
   trailing.Method(Trailing_MA_Method);
   trailing.Applied(Trailing_MA_Applied);


}
//----------------------------------------------
if (USE_MONEY_FIX_RISK)
{
//--- Creation of money object
   CMoneyFixedRisk *money=new CMoneyFixedRisk;
   if(money==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating money");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Add money to expert (will be deleted automatically))
   if(!Billexwiz.InitMoney(money))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing money");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Set money parameters
   money.Percent(Money_FixRisk_Percent);
}

//----------------------------
   CMoneyFixedLot *money=new CMoneyFixedLot;
   if(money==NULL)
     {
      //--- failed
      printf(__FUNCTION__+": error creating money");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Add money to expert (will be deleted automatically))
   if(!Billexwiz.InitMoney(money))
     {
      //--- failed
      printf(__FUNCTION__+": error initializing money");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Set money parameters
   money.Percent(Money_FixLot_Percent);
   money.Lots(Money_FixLot_Lots);
//--- Check all trading objects parameters
   if(!Billexwiz.ValidationSettings())
     {
      //--- failed
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- Tuning of all necessary indicators
   if(!Billexwiz.InitIndicators())
     {
      //--- failed
      printf(__FUNCTION__+": error initializing indicators");
      Billexwiz.Deinit();
      return(INIT_FAILED);
     }
//--- ok
   return(INIT_SUCCEEDED);
  }
//+------------------------------------------------------------------+
//| Deinitialization function of the expert                          |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   Billexwiz.Deinit();
  }
//+------------------------------------------------------------------+
//| "Tick" event handler function                                    |
//+------------------------------------------------------------------+
void OnTick()
  {
   Billexwiz.OnTick();
  }
//+------------------------------------------------------------------+
//| "Trade" event handler function                                   |
//+------------------------------------------------------------------+
void OnTrade()
  {
   Billexwiz.OnTrade();
  }
//+------------------------------------------------------------------+
//| "Timer" event handler function                                   |
//+------------------------------------------------------------------+
void OnTimer()
  {
   Billexwiz.OnTimer();
  }
//+------------------------------------------------------------------+
//+------------------------------------------------------------------+
//| TradeTransaction function                                        |
//+------------------------------------------------------------------+
void OnTradeTransaction(const MqlTradeTransaction& trans,
                        const MqlTradeRequest& request,
                        const MqlTradeResult& result)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| Tester function                                                  |
//+------------------------------------------------------------------+
double OnTester()
  {
//---
   double ret=0.1;
//---

//---
   return(ret);
  }
//+------------------------------------------------------------------+
//| TesterInit function                                              |
//+------------------------------------------------------------------+
void OnTesterInit()
  {
//---
   
  }
//+------------------------------------------------------------------+
//| TesterPass function                                              |
//+------------------------------------------------------------------+
void OnTesterPass()
  {
//---
   
  }
//+------------------------------------------------------------------+
//| TesterDeinit function                                            |
//+------------------------------------------------------------------+
void OnTesterDeinit()
  {
//---
   
  }
//+------------------------------------------------------------------+
//| ChartEvent function                                              |
//+------------------------------------------------------------------+
void OnChartEvent(const int id,
                  const long &lparam,
                  const double &dparam,
                  const string &sparam)
  {
//---
   
  }
//+------------------------------------------------------------------+
//| BookEvent function                                               |
//+------------------------------------------------------------------+
void OnBookEvent(const string &symbol)
  {
//---
   
  }
//+------------------------------------------------------------------+
